/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BranchService } from "../branch.service";
import { BranchCreateInput } from "./BranchCreateInput";
import { Branch } from "./Branch";
import { BranchFindManyArgs } from "./BranchFindManyArgs";
import { BranchWhereUniqueInput } from "./BranchWhereUniqueInput";
import { BranchUpdateInput } from "./BranchUpdateInput";

export class BranchControllerBase {
  constructor(protected readonly service: BranchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Branch })
  async createBranch(@common.Body() data: BranchCreateInput): Promise<Branch> {
    return await this.service.createBranch({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Branch] })
  @ApiNestedQuery(BranchFindManyArgs)
  async branches(@common.Req() request: Request): Promise<Branch[]> {
    const args = plainToClass(BranchFindManyArgs, request.query);
    return this.service.branches({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Branch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async branch(
    @common.Param() params: BranchWhereUniqueInput
  ): Promise<Branch | null> {
    const result = await this.service.branch({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Branch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBranch(
    @common.Param() params: BranchWhereUniqueInput,
    @common.Body() data: BranchUpdateInput
  ): Promise<Branch | null> {
    try {
      return await this.service.updateBranch({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Branch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBranch(
    @common.Param() params: BranchWhereUniqueInput
  ): Promise<Branch | null> {
    try {
      return await this.service.deleteBranch({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
