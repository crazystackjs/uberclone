/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LoanService } from "../loan.service";
import { LoanCreateInput } from "./LoanCreateInput";
import { Loan } from "./Loan";
import { LoanFindManyArgs } from "./LoanFindManyArgs";
import { LoanWhereUniqueInput } from "./LoanWhereUniqueInput";
import { LoanUpdateInput } from "./LoanUpdateInput";

export class LoanControllerBase {
  constructor(protected readonly service: LoanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Loan })
  async createLoan(@common.Body() data: LoanCreateInput): Promise<Loan> {
    return await this.service.createLoan({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Loan] })
  @ApiNestedQuery(LoanFindManyArgs)
  async loans(@common.Req() request: Request): Promise<Loan[]> {
    const args = plainToClass(LoanFindManyArgs, request.query);
    return this.service.loans({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Loan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async loan(
    @common.Param() params: LoanWhereUniqueInput
  ): Promise<Loan | null> {
    const result = await this.service.loan({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Loan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLoan(
    @common.Param() params: LoanWhereUniqueInput,
    @common.Body() data: LoanUpdateInput
  ): Promise<Loan | null> {
    try {
      return await this.service.updateLoan({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Loan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLoan(
    @common.Param() params: LoanWhereUniqueInput
  ): Promise<Loan | null> {
    try {
      return await this.service.deleteLoan({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
