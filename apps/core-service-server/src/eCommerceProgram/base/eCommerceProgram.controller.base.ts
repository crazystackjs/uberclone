/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ECommerceProgramService } from "../eCommerceProgram.service";
import { ECommerceProgramCreateInput } from "./ECommerceProgramCreateInput";
import { ECommerceProgram } from "./ECommerceProgram";
import { Post } from "../../post/base/Post";
import { ECommerceProgramFindManyArgs } from "./ECommerceProgramFindManyArgs";
import { ECommerceProgramWhereUniqueInput } from "./ECommerceProgramWhereUniqueInput";
import { ECommerceProgramUpdateInput } from "./ECommerceProgramUpdateInput";

export class ECommerceProgramControllerBase {
  constructor(protected readonly service: ECommerceProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ECommerceProgram })
  async createECommerceProgram(
    @common.Body() data: ECommerceProgramCreateInput
  ): Promise<ECommerceProgram> {
    return await this.service.createECommerceProgram({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ECommerceProgram] })
  @ApiNestedQuery(ECommerceProgramFindManyArgs)
  async eCommercePrograms(
    @common.Req() request: Request
  ): Promise<ECommerceProgram[]> {
    const args = plainToClass(ECommerceProgramFindManyArgs, request.query);
    return this.service.eCommercePrograms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ECommerceProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async eCommerceProgram(
    @common.Param() params: ECommerceProgramWhereUniqueInput
  ): Promise<ECommerceProgram | null> {
    const result = await this.service.eCommerceProgram({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ECommerceProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateECommerceProgram(
    @common.Param() params: ECommerceProgramWhereUniqueInput,
    @common.Body() data: ECommerceProgramUpdateInput
  ): Promise<ECommerceProgram | null> {
    try {
      return await this.service.updateECommerceProgram({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ECommerceProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteECommerceProgram(
    @common.Param() params: ECommerceProgramWhereUniqueInput
  ): Promise<ECommerceProgram | null> {
    try {
      return await this.service.deleteECommerceProgram({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
