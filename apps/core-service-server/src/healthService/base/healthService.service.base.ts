/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, HealthService as PrismaHealthService } from "@prisma/client";

export class HealthServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HealthServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.healthService.count(args);
  }

  async healthServices<T extends Prisma.HealthServiceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HealthServiceFindManyArgs>
  ): Promise<PrismaHealthService[]> {
    return this.prisma.healthService.findMany<Prisma.HealthServiceFindManyArgs>(
      args
    );
  }
  async healthService<T extends Prisma.HealthServiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HealthServiceFindUniqueArgs>
  ): Promise<PrismaHealthService | null> {
    return this.prisma.healthService.findUnique(args);
  }
  async createHealthService<T extends Prisma.HealthServiceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HealthServiceCreateArgs>
  ): Promise<PrismaHealthService> {
    return this.prisma.healthService.create<T>(args);
  }
  async updateHealthService<T extends Prisma.HealthServiceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HealthServiceUpdateArgs>
  ): Promise<PrismaHealthService> {
    return this.prisma.healthService.update<T>(args);
  }
  async deleteHealthService<T extends Prisma.HealthServiceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HealthServiceDeleteArgs>
  ): Promise<PrismaHealthService> {
    return this.prisma.healthService.delete(args);
  }
}
