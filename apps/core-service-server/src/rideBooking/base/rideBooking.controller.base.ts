/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RideBookingService } from "../rideBooking.service";
import { RideBookingCreateInput } from "./RideBookingCreateInput";
import { RideBooking } from "./RideBooking";
import { Post } from "../../post/base/Post";
import { RideBookingFindManyArgs } from "./RideBookingFindManyArgs";
import { RideBookingWhereUniqueInput } from "./RideBookingWhereUniqueInput";
import { RideBookingUpdateInput } from "./RideBookingUpdateInput";

export class RideBookingControllerBase {
  constructor(protected readonly service: RideBookingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RideBooking })
  async createRideBooking(
    @common.Body() data: RideBookingCreateInput
  ): Promise<RideBooking> {
    return await this.service.createRideBooking({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RideBooking] })
  @ApiNestedQuery(RideBookingFindManyArgs)
  async rideBookings(@common.Req() request: Request): Promise<RideBooking[]> {
    const args = plainToClass(RideBookingFindManyArgs, request.query);
    return this.service.rideBookings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RideBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rideBooking(
    @common.Param() params: RideBookingWhereUniqueInput
  ): Promise<RideBooking | null> {
    const result = await this.service.rideBooking({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RideBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRideBooking(
    @common.Param() params: RideBookingWhereUniqueInput,
    @common.Body() data: RideBookingUpdateInput
  ): Promise<RideBooking | null> {
    try {
      return await this.service.updateRideBooking({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RideBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRideBooking(
    @common.Param() params: RideBookingWhereUniqueInput
  ): Promise<RideBooking | null> {
    try {
      return await this.service.deleteRideBooking({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
