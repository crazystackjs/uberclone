/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RideBooking as PrismaRideBooking } from "@prisma/client";

export class RideBookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RideBookingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rideBooking.count(args);
  }

  async rideBookings<T extends Prisma.RideBookingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideBookingFindManyArgs>
  ): Promise<PrismaRideBooking[]> {
    return this.prisma.rideBooking.findMany<Prisma.RideBookingFindManyArgs>(
      args
    );
  }
  async rideBooking<T extends Prisma.RideBookingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideBookingFindUniqueArgs>
  ): Promise<PrismaRideBooking | null> {
    return this.prisma.rideBooking.findUnique(args);
  }
  async createRideBooking<T extends Prisma.RideBookingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideBookingCreateArgs>
  ): Promise<PrismaRideBooking> {
    return this.prisma.rideBooking.create<T>(args);
  }
  async updateRideBooking<T extends Prisma.RideBookingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideBookingUpdateArgs>
  ): Promise<PrismaRideBooking> {
    return this.prisma.rideBooking.update<T>(args);
  }
  async deleteRideBooking<T extends Prisma.RideBookingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RideBookingDeleteArgs>
  ): Promise<PrismaRideBooking> {
    return this.prisma.rideBooking.delete(args);
  }
}
