/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Video as PrismaVideo,
  Session as PrismaSession,
} from "@prisma/client";
import { CommentDto } from "../CommentDto";
import { RatingDto } from "../RatingDto";
import { PopularVideoDto } from "../PopularVideoDto";
import { CategorySearchDto } from "../CategorySearchDto";
import { RecommendationDto } from "../RecommendationDto";

export class VideoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VideoCountArgs, "select">): Promise<number> {
    return this.prisma.video.count(args);
  }

  async videos<T extends Prisma.VideoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoFindManyArgs>
  ): Promise<PrismaVideo[]> {
    return this.prisma.video.findMany<Prisma.VideoFindManyArgs>(args);
  }
  async video<T extends Prisma.VideoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoFindUniqueArgs>
  ): Promise<PrismaVideo | null> {
    return this.prisma.video.findUnique(args);
  }
  async createVideo<T extends Prisma.VideoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoCreateArgs>
  ): Promise<PrismaVideo> {
    return this.prisma.video.create<T>(args);
  }
  async updateVideo<T extends Prisma.VideoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoUpdateArgs>
  ): Promise<PrismaVideo> {
    return this.prisma.video.update<T>(args);
  }
  async deleteVideo<T extends Prisma.VideoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VideoDeleteArgs>
  ): Promise<PrismaVideo> {
    return this.prisma.video.delete(args);
  }

  async findSessions(
    parentId: string,
    args: Prisma.SessionFindManyArgs
  ): Promise<PrismaSession[]> {
    return this.prisma.video
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sessions(args);
  }
  async AdicionarComentarios(args: CommentDto): Promise<CommentDto> {
    throw new Error("Not implemented");
  }
  async AdicionarComentRios(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async AvaliarVideos(args: RatingDto): Promise<RatingDto> {
    throw new Error("Not implemented");
  }
  async AvaliarVDeos(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ListarVideosPopulares(args: string): Promise<PopularVideoDto[]> {
    throw new Error("Not implemented");
  }
  async ListarVDeosPopulares(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async PesquisarVideosPorCategoria(
    args: string
  ): Promise<CategorySearchDto[]> {
    throw new Error("Not implemented");
  }
  async PesquisarVDeosPorCategoria(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async RecomendarVideos(args: string): Promise<RecommendationDto[]> {
    throw new Error("Not implemented");
  }
  async RecomendarVDeos(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
