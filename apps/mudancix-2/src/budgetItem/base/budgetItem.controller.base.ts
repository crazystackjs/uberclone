/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BudgetItemService } from "../budgetItem.service";
import { BudgetItemCreateInput } from "./BudgetItemCreateInput";
import { BudgetItem } from "./BudgetItem";
import { BudgetItemFindManyArgs } from "./BudgetItemFindManyArgs";
import { BudgetItemWhereUniqueInput } from "./BudgetItemWhereUniqueInput";
import { BudgetItemUpdateInput } from "./BudgetItemUpdateInput";

export class BudgetItemControllerBase {
  constructor(protected readonly service: BudgetItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BudgetItem })
  async createBudgetItem(
    @common.Body() data: BudgetItemCreateInput
  ): Promise<BudgetItem> {
    return await this.service.createBudgetItem({
      data: {
        ...data,

        budget: {
          connect: data.budget,
        },
      },
      select: {
        additionalRequirements: true,

        budget: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        id: true,
        itemName: true,
        needsPacking: true,
        needsTempControl: true,
        photoUrl: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BudgetItem] })
  @ApiNestedQuery(BudgetItemFindManyArgs)
  async budgetItems(@common.Req() request: Request): Promise<BudgetItem[]> {
    const args = plainToClass(BudgetItemFindManyArgs, request.query);
    return this.service.budgetItems({
      ...args,
      select: {
        additionalRequirements: true,

        budget: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        id: true,
        itemName: true,
        needsPacking: true,
        needsTempControl: true,
        photoUrl: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BudgetItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async budgetItem(
    @common.Param() params: BudgetItemWhereUniqueInput
  ): Promise<BudgetItem | null> {
    const result = await this.service.budgetItem({
      where: params,
      select: {
        additionalRequirements: true,

        budget: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        id: true,
        itemName: true,
        needsPacking: true,
        needsTempControl: true,
        photoUrl: true,
        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BudgetItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBudgetItem(
    @common.Param() params: BudgetItemWhereUniqueInput,
    @common.Body() data: BudgetItemUpdateInput
  ): Promise<BudgetItem | null> {
    try {
      return await this.service.updateBudgetItem({
        where: params,
        data: {
          ...data,

          budget: {
            connect: data.budget,
          },
        },
        select: {
          additionalRequirements: true,

          budget: {
            select: {
              id: true,
            },
          },

          category: true,
          createdAt: true,
          id: true,
          itemName: true,
          needsPacking: true,
          needsTempControl: true,
          photoUrl: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BudgetItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBudgetItem(
    @common.Param() params: BudgetItemWhereUniqueInput
  ): Promise<BudgetItem | null> {
    try {
      return await this.service.deleteBudgetItem({
        where: params,
        select: {
          additionalRequirements: true,

          budget: {
            select: {
              id: true,
            },
          },

          category: true,
          createdAt: true,
          id: true,
          itemName: true,
          needsPacking: true,
          needsTempControl: true,
          photoUrl: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
