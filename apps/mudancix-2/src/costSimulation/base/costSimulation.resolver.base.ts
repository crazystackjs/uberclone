/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CostSimulation } from "./CostSimulation";
import { CostSimulationCountArgs } from "./CostSimulationCountArgs";
import { CostSimulationFindManyArgs } from "./CostSimulationFindManyArgs";
import { CostSimulationFindUniqueArgs } from "./CostSimulationFindUniqueArgs";
import { CreateCostSimulationArgs } from "./CreateCostSimulationArgs";
import { UpdateCostSimulationArgs } from "./UpdateCostSimulationArgs";
import { DeleteCostSimulationArgs } from "./DeleteCostSimulationArgs";
import { Move } from "../../move/base/Move";
import { CostSimulationService } from "../costSimulation.service";
@graphql.Resolver(() => CostSimulation)
export class CostSimulationResolverBase {
  constructor(protected readonly service: CostSimulationService) {}

  async _costSimulationsMeta(
    @graphql.Args() args: CostSimulationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CostSimulation])
  async costSimulations(
    @graphql.Args() args: CostSimulationFindManyArgs
  ): Promise<CostSimulation[]> {
    return this.service.costSimulations(args);
  }

  @graphql.Query(() => CostSimulation, { nullable: true })
  async costSimulation(
    @graphql.Args() args: CostSimulationFindUniqueArgs
  ): Promise<CostSimulation | null> {
    const result = await this.service.costSimulation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CostSimulation)
  async createCostSimulation(
    @graphql.Args() args: CreateCostSimulationArgs
  ): Promise<CostSimulation> {
    return await this.service.createCostSimulation({
      ...args,
      data: {
        ...args.data,

        move: {
          connect: args.data.move,
        },
      },
    });
  }

  @graphql.Mutation(() => CostSimulation)
  async updateCostSimulation(
    @graphql.Args() args: UpdateCostSimulationArgs
  ): Promise<CostSimulation | null> {
    try {
      return await this.service.updateCostSimulation({
        ...args,
        data: {
          ...args.data,

          move: {
            connect: args.data.move,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CostSimulation)
  async deleteCostSimulation(
    @graphql.Args() args: DeleteCostSimulationArgs
  ): Promise<CostSimulation | null> {
    try {
      return await this.service.deleteCostSimulation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Move, {
    nullable: true,
    name: "move",
  })
  async getMove(
    @graphql.Parent() parent: CostSimulation
  ): Promise<Move | null> {
    const result = await this.service.getMove(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
