/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CostSimulation as PrismaCostSimulation,
  Move as PrismaMove,
} from "@prisma/client";

export class CostSimulationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CostSimulationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.costSimulation.count(args);
  }

  async costSimulations<T extends Prisma.CostSimulationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostSimulationFindManyArgs>
  ): Promise<PrismaCostSimulation[]> {
    return this.prisma.costSimulation.findMany<Prisma.CostSimulationFindManyArgs>(
      args
    );
  }
  async costSimulation<T extends Prisma.CostSimulationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostSimulationFindUniqueArgs>
  ): Promise<PrismaCostSimulation | null> {
    return this.prisma.costSimulation.findUnique(args);
  }
  async createCostSimulation<T extends Prisma.CostSimulationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostSimulationCreateArgs>
  ): Promise<PrismaCostSimulation> {
    return this.prisma.costSimulation.create<T>(args);
  }
  async updateCostSimulation<T extends Prisma.CostSimulationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostSimulationUpdateArgs>
  ): Promise<PrismaCostSimulation> {
    return this.prisma.costSimulation.update<T>(args);
  }
  async deleteCostSimulation<T extends Prisma.CostSimulationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostSimulationDeleteArgs>
  ): Promise<PrismaCostSimulation> {
    return this.prisma.costSimulation.delete(args);
  }

  async getMove(parentId: string): Promise<PrismaMove | null> {
    return this.prisma.costSimulation
      .findUnique({
        where: { id: parentId },
      })
      .move();
  }
}
