/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GpsDatumService } from "../gpsDatum.service";
import { GpsDatumCreateInput } from "./GpsDatumCreateInput";
import { GpsDatum } from "./GpsDatum";
import { GpsDatumFindManyArgs } from "./GpsDatumFindManyArgs";
import { GpsDatumWhereUniqueInput } from "./GpsDatumWhereUniqueInput";
import { GpsDatumUpdateInput } from "./GpsDatumUpdateInput";

export class GpsDatumControllerBase {
  constructor(protected readonly service: GpsDatumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GpsDatum })
  async createGpsDatum(
    @common.Body() data: GpsDatumCreateInput
  ): Promise<GpsDatum> {
    return await this.service.createGpsDatum({
      data: {
        ...data,

        move: {
          connect: data.move,
        },
      },
      select: {
        createdAt: true,
        id: true,
        location: true,

        move: {
          select: {
            id: true,
          },
        },

        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GpsDatum] })
  @ApiNestedQuery(GpsDatumFindManyArgs)
  async gpsData(@common.Req() request: Request): Promise<GpsDatum[]> {
    const args = plainToClass(GpsDatumFindManyArgs, request.query);
    return this.service.gpsData({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,

        move: {
          select: {
            id: true,
          },
        },

        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GpsDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gpsDatum(
    @common.Param() params: GpsDatumWhereUniqueInput
  ): Promise<GpsDatum | null> {
    const result = await this.service.gpsDatum({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,

        move: {
          select: {
            id: true,
          },
        },

        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GpsDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGpsDatum(
    @common.Param() params: GpsDatumWhereUniqueInput,
    @common.Body() data: GpsDatumUpdateInput
  ): Promise<GpsDatum | null> {
    try {
      return await this.service.updateGpsDatum({
        where: params,
        data: {
          ...data,

          move: {
            connect: data.move,
          },
        },
        select: {
          createdAt: true,
          id: true,
          location: true,

          move: {
            select: {
              id: true,
            },
          },

          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GpsDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGpsDatum(
    @common.Param() params: GpsDatumWhereUniqueInput
  ): Promise<GpsDatum | null> {
    try {
      return await this.service.deleteGpsDatum({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,

          move: {
            select: {
              id: true,
            },
          },

          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
