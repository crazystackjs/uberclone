/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BudgetWhereUniqueInput } from "../../budget/base/BudgetWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsNumber,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { CostSimulationUpdateManyWithoutMovesInput } from "./CostSimulationUpdateManyWithoutMovesInput";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { DriverWhereUniqueInput } from "../../driver/base/DriverWhereUniqueInput";
import { GpsDatumUpdateManyWithoutMovesInput } from "./GpsDatumUpdateManyWithoutMovesInput";
import { RouteWhereUniqueInput } from "../../route/base/RouteWhereUniqueInput";
import { EnumMoveStatus } from "./EnumMoveStatus";

@InputType()
class MoveUpdateInput {
  @ApiProperty({
    required: false,
    type: () => BudgetWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BudgetWhereUniqueInput)
  @IsOptional()
  @Field(() => BudgetWhereUniqueInput, {
    nullable: true,
  })
  budget?: BudgetWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  completedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => CostSimulationUpdateManyWithoutMovesInput,
  })
  @ValidateNested()
  @Type(() => CostSimulationUpdateManyWithoutMovesInput)
  @IsOptional()
  @Field(() => CostSimulationUpdateManyWithoutMovesInput, {
    nullable: true,
  })
  costSimulation?: CostSimulationUpdateManyWithoutMovesInput;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  customer?: CustomerWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  deliveryLocation?: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  distance?: number;

  @ApiProperty({
    required: false,
    type: () => DriverWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DriverWhereUniqueInput)
  @IsOptional()
  @Field(() => DriverWhereUniqueInput, {
    nullable: true,
  })
  driver?: DriverWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => GpsDatumUpdateManyWithoutMovesInput,
  })
  @ValidateNested()
  @Type(() => GpsDatumUpdateManyWithoutMovesInput)
  @IsOptional()
  @Field(() => GpsDatumUpdateManyWithoutMovesInput, {
    nullable: true,
  })
  gpsData?: GpsDatumUpdateManyWithoutMovesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  pickupLocation?: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  price?: number;

  @ApiProperty({
    required: false,
    type: () => RouteWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RouteWhereUniqueInput)
  @IsOptional()
  @Field(() => RouteWhereUniqueInput, {
    nullable: true,
  })
  route?: RouteWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  scheduledAt?: Date;

  @ApiProperty({
    required: false,
    enum: EnumMoveStatus,
  })
  @IsEnum(EnumMoveStatus)
  @IsOptional()
  @Field(() => EnumMoveStatus, {
    nullable: true,
  })
  status?: "PENDING" | "IN_PROGRESS" | "COMPLETED" | "CANCELED";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  volume?: number;
}

export { MoveUpdateInput as MoveUpdateInput };
