/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MoveService } from "../move.service";
import { MoveCreateInput } from "./MoveCreateInput";
import { Move } from "./Move";
import { MoveFindManyArgs } from "./MoveFindManyArgs";
import { MoveWhereUniqueInput } from "./MoveWhereUniqueInput";
import { MoveUpdateInput } from "./MoveUpdateInput";
import { CostSimulationFindManyArgs } from "../../costSimulation/base/CostSimulationFindManyArgs";
import { CostSimulation } from "../../costSimulation/base/CostSimulation";
import { CostSimulationWhereUniqueInput } from "../../costSimulation/base/CostSimulationWhereUniqueInput";
import { GpsDatumFindManyArgs } from "../../gpsDatum/base/GpsDatumFindManyArgs";
import { GpsDatum } from "../../gpsDatum/base/GpsDatum";
import { GpsDatumWhereUniqueInput } from "../../gpsDatum/base/GpsDatumWhereUniqueInput";

export class MoveControllerBase {
  constructor(protected readonly service: MoveService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Move })
  async createMove(@common.Body() data: MoveCreateInput): Promise<Move> {
    return await this.service.createMove({
      data: {
        ...data,

        budget: data.budget
          ? {
              connect: data.budget,
            }
          : undefined,

        customer: {
          connect: data.customer,
        },

        driver: data.driver
          ? {
              connect: data.driver,
            }
          : undefined,

        route: data.route
          ? {
              connect: data.route,
            }
          : undefined,
      },
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        deliveryLocation: true,
        distance: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        pickupLocation: true,
        price: true,

        route: {
          select: {
            id: true,
          },
        },

        scheduledAt: true,
        status: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Move] })
  @ApiNestedQuery(MoveFindManyArgs)
  async moves(@common.Req() request: Request): Promise<Move[]> {
    const args = plainToClass(MoveFindManyArgs, request.query);
    return this.service.moves({
      ...args,
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        deliveryLocation: true,
        distance: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        pickupLocation: true,
        price: true,

        route: {
          select: {
            id: true,
          },
        },

        scheduledAt: true,
        status: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Move })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async move(
    @common.Param() params: MoveWhereUniqueInput
  ): Promise<Move | null> {
    const result = await this.service.move({
      where: params,
      select: {
        budget: {
          select: {
            id: true,
          },
        },

        completedAt: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        deliveryLocation: true,
        distance: true,

        driver: {
          select: {
            id: true,
          },
        },

        id: true,
        pickupLocation: true,
        price: true,

        route: {
          select: {
            id: true,
          },
        },

        scheduledAt: true,
        status: true,
        updatedAt: true,
        volume: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Move })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMove(
    @common.Param() params: MoveWhereUniqueInput,
    @common.Body() data: MoveUpdateInput
  ): Promise<Move | null> {
    try {
      return await this.service.updateMove({
        where: params,
        data: {
          ...data,

          budget: data.budget
            ? {
                connect: data.budget,
              }
            : undefined,

          customer: {
            connect: data.customer,
          },

          driver: data.driver
            ? {
                connect: data.driver,
              }
            : undefined,

          route: data.route
            ? {
                connect: data.route,
              }
            : undefined,
        },
        select: {
          budget: {
            select: {
              id: true,
            },
          },

          completedAt: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          deliveryLocation: true,
          distance: true,

          driver: {
            select: {
              id: true,
            },
          },

          id: true,
          pickupLocation: true,
          price: true,

          route: {
            select: {
              id: true,
            },
          },

          scheduledAt: true,
          status: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Move })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMove(
    @common.Param() params: MoveWhereUniqueInput
  ): Promise<Move | null> {
    try {
      return await this.service.deleteMove({
        where: params,
        select: {
          budget: {
            select: {
              id: true,
            },
          },

          completedAt: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          deliveryLocation: true,
          distance: true,

          driver: {
            select: {
              id: true,
            },
          },

          id: true,
          pickupLocation: true,
          price: true,

          route: {
            select: {
              id: true,
            },
          },

          scheduledAt: true,
          status: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/costSimulation")
  @ApiNestedQuery(CostSimulationFindManyArgs)
  async findCostSimulation(
    @common.Req() request: Request,
    @common.Param() params: MoveWhereUniqueInput
  ): Promise<CostSimulation[]> {
    const query = plainToClass(CostSimulationFindManyArgs, request.query);
    const results = await this.service.findCostSimulation(params.id, {
      ...query,
      select: {
        additionalServices: true,
        createdAt: true,
        distance: true,
        id: true,

        move: {
          select: {
            id: true,
          },
        },

        totalCost: true,
        updatedAt: true,
        volume: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/costSimulation")
  async connectCostSimulation(
    @common.Param() params: MoveWhereUniqueInput,
    @common.Body() body: CostSimulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costSimulation: {
        connect: body,
      },
    };
    await this.service.updateMove({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/costSimulation")
  async updateCostSimulation(
    @common.Param() params: MoveWhereUniqueInput,
    @common.Body() body: CostSimulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costSimulation: {
        set: body,
      },
    };
    await this.service.updateMove({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/costSimulation")
  async disconnectCostSimulation(
    @common.Param() params: MoveWhereUniqueInput,
    @common.Body() body: CostSimulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costSimulation: {
        disconnect: body,
      },
    };
    await this.service.updateMove({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/gpsData")
  @ApiNestedQuery(GpsDatumFindManyArgs)
  async findGpsData(
    @common.Req() request: Request,
    @common.Param() params: MoveWhereUniqueInput
  ): Promise<GpsDatum[]> {
    const query = plainToClass(GpsDatumFindManyArgs, request.query);
    const results = await this.service.findGpsData(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        location: true,

        move: {
          select: {
            id: true,
          },
        },

        timestamp: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gpsData")
  async connectGpsData(
    @common.Param() params: MoveWhereUniqueInput,
    @common.Body() body: GpsDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gpsData: {
        connect: body,
      },
    };
    await this.service.updateMove({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gpsData")
  async updateGpsData(
    @common.Param() params: MoveWhereUniqueInput,
    @common.Body() body: GpsDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gpsData: {
        set: body,
      },
    };
    await this.service.updateMove({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gpsData")
  async disconnectGpsData(
    @common.Param() params: MoveWhereUniqueInput,
    @common.Body() body: GpsDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gpsData: {
        disconnect: body,
      },
    };
    await this.service.updateMove({
      where: params,
      data,
      select: { id: true },
    });
  }
}
