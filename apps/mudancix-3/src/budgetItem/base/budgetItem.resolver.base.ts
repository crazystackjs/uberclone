/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BudgetItem } from "./BudgetItem";
import { BudgetItemCountArgs } from "./BudgetItemCountArgs";
import { BudgetItemFindManyArgs } from "./BudgetItemFindManyArgs";
import { BudgetItemFindUniqueArgs } from "./BudgetItemFindUniqueArgs";
import { CreateBudgetItemArgs } from "./CreateBudgetItemArgs";
import { UpdateBudgetItemArgs } from "./UpdateBudgetItemArgs";
import { DeleteBudgetItemArgs } from "./DeleteBudgetItemArgs";
import { Budget } from "../../budget/base/Budget";
import { BudgetItemService } from "../budgetItem.service";
@graphql.Resolver(() => BudgetItem)
export class BudgetItemResolverBase {
  constructor(protected readonly service: BudgetItemService) {}

  async _budgetItemsMeta(
    @graphql.Args() args: BudgetItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BudgetItem])
  async budgetItems(
    @graphql.Args() args: BudgetItemFindManyArgs
  ): Promise<BudgetItem[]> {
    return this.service.budgetItems(args);
  }

  @graphql.Query(() => BudgetItem, { nullable: true })
  async budgetItem(
    @graphql.Args() args: BudgetItemFindUniqueArgs
  ): Promise<BudgetItem | null> {
    const result = await this.service.budgetItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BudgetItem)
  async createBudgetItem(
    @graphql.Args() args: CreateBudgetItemArgs
  ): Promise<BudgetItem> {
    return await this.service.createBudgetItem({
      ...args,
      data: {
        ...args.data,

        budget: {
          connect: args.data.budget,
        },
      },
    });
  }

  @graphql.Mutation(() => BudgetItem)
  async updateBudgetItem(
    @graphql.Args() args: UpdateBudgetItemArgs
  ): Promise<BudgetItem | null> {
    try {
      return await this.service.updateBudgetItem({
        ...args,
        data: {
          ...args.data,

          budget: {
            connect: args.data.budget,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BudgetItem)
  async deleteBudgetItem(
    @graphql.Args() args: DeleteBudgetItemArgs
  ): Promise<BudgetItem | null> {
    try {
      return await this.service.deleteBudgetItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Budget, {
    nullable: true,
    name: "budget",
  })
  async getBudget(
    @graphql.Parent() parent: BudgetItem
  ): Promise<Budget | null> {
    const result = await this.service.getBudget(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
