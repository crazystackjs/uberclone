/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BudgetItem as PrismaBudgetItem,
  Budget as PrismaBudget,
} from "@prisma/client";

export class BudgetItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BudgetItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.budgetItem.count(args);
  }

  async budgetItems<T extends Prisma.BudgetItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BudgetItemFindManyArgs>
  ): Promise<PrismaBudgetItem[]> {
    return this.prisma.budgetItem.findMany<Prisma.BudgetItemFindManyArgs>(args);
  }
  async budgetItem<T extends Prisma.BudgetItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BudgetItemFindUniqueArgs>
  ): Promise<PrismaBudgetItem | null> {
    return this.prisma.budgetItem.findUnique(args);
  }
  async createBudgetItem<T extends Prisma.BudgetItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BudgetItemCreateArgs>
  ): Promise<PrismaBudgetItem> {
    return this.prisma.budgetItem.create<T>(args);
  }
  async updateBudgetItem<T extends Prisma.BudgetItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BudgetItemUpdateArgs>
  ): Promise<PrismaBudgetItem> {
    return this.prisma.budgetItem.update<T>(args);
  }
  async deleteBudgetItem<T extends Prisma.BudgetItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BudgetItemDeleteArgs>
  ): Promise<PrismaBudgetItem> {
    return this.prisma.budgetItem.delete(args);
  }

  async getBudget(parentId: string): Promise<PrismaBudget | null> {
    return this.prisma.budgetItem
      .findUnique({
        where: { id: parentId },
      })
      .budget();
  }
}
