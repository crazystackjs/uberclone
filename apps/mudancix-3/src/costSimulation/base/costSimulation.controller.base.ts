/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CostSimulationService } from "../costSimulation.service";
import { CostSimulationCreateInput } from "./CostSimulationCreateInput";
import { CostSimulation } from "./CostSimulation";
import { CostSimulationFindManyArgs } from "./CostSimulationFindManyArgs";
import { CostSimulationWhereUniqueInput } from "./CostSimulationWhereUniqueInput";
import { CostSimulationUpdateInput } from "./CostSimulationUpdateInput";

export class CostSimulationControllerBase {
  constructor(protected readonly service: CostSimulationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CostSimulation })
  async createCostSimulation(
    @common.Body() data: CostSimulationCreateInput
  ): Promise<CostSimulation> {
    return await this.service.createCostSimulation({
      data: {
        ...data,

        move: {
          connect: data.move,
        },
      },
      select: {
        additionalServices: true,
        createdAt: true,
        distance: true,
        id: true,

        move: {
          select: {
            id: true,
          },
        },

        totalCost: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CostSimulation] })
  @ApiNestedQuery(CostSimulationFindManyArgs)
  async costSimulations(
    @common.Req() request: Request
  ): Promise<CostSimulation[]> {
    const args = plainToClass(CostSimulationFindManyArgs, request.query);
    return this.service.costSimulations({
      ...args,
      select: {
        additionalServices: true,
        createdAt: true,
        distance: true,
        id: true,

        move: {
          select: {
            id: true,
          },
        },

        totalCost: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CostSimulation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async costSimulation(
    @common.Param() params: CostSimulationWhereUniqueInput
  ): Promise<CostSimulation | null> {
    const result = await this.service.costSimulation({
      where: params,
      select: {
        additionalServices: true,
        createdAt: true,
        distance: true,
        id: true,

        move: {
          select: {
            id: true,
          },
        },

        totalCost: true,
        updatedAt: true,
        volume: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CostSimulation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCostSimulation(
    @common.Param() params: CostSimulationWhereUniqueInput,
    @common.Body() data: CostSimulationUpdateInput
  ): Promise<CostSimulation | null> {
    try {
      return await this.service.updateCostSimulation({
        where: params,
        data: {
          ...data,

          move: {
            connect: data.move,
          },
        },
        select: {
          additionalServices: true,
          createdAt: true,
          distance: true,
          id: true,

          move: {
            select: {
              id: true,
            },
          },

          totalCost: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CostSimulation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCostSimulation(
    @common.Param() params: CostSimulationWhereUniqueInput
  ): Promise<CostSimulation | null> {
    try {
      return await this.service.deleteCostSimulation({
        where: params,
        select: {
          additionalServices: true,
          createdAt: true,
          distance: true,
          id: true,

          move: {
            select: {
              id: true,
            },
          },

          totalCost: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
