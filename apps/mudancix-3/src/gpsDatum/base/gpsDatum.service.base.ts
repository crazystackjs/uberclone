/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GpsDatum as PrismaGpsDatum,
  Move as PrismaMove,
} from "@prisma/client";

export class GpsDatumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GpsDatumCountArgs, "select">): Promise<number> {
    return this.prisma.gpsDatum.count(args);
  }

  async gpsData<T extends Prisma.GpsDatumFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GpsDatumFindManyArgs>
  ): Promise<PrismaGpsDatum[]> {
    return this.prisma.gpsDatum.findMany<Prisma.GpsDatumFindManyArgs>(args);
  }
  async gpsDatum<T extends Prisma.GpsDatumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GpsDatumFindUniqueArgs>
  ): Promise<PrismaGpsDatum | null> {
    return this.prisma.gpsDatum.findUnique(args);
  }
  async createGpsDatum<T extends Prisma.GpsDatumCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GpsDatumCreateArgs>
  ): Promise<PrismaGpsDatum> {
    return this.prisma.gpsDatum.create<T>(args);
  }
  async updateGpsDatum<T extends Prisma.GpsDatumUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GpsDatumUpdateArgs>
  ): Promise<PrismaGpsDatum> {
    return this.prisma.gpsDatum.update<T>(args);
  }
  async deleteGpsDatum<T extends Prisma.GpsDatumDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GpsDatumDeleteArgs>
  ): Promise<PrismaGpsDatum> {
    return this.prisma.gpsDatum.delete(args);
  }

  async getMove(parentId: string): Promise<PrismaMove | null> {
    return this.prisma.gpsDatum
      .findUnique({
        where: { id: parentId },
      })
      .move();
  }
}
