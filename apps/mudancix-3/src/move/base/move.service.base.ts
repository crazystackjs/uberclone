/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Move as PrismaMove,
  CostSimulation as PrismaCostSimulation,
  GpsDatum as PrismaGpsDatum,
  Payment as PrismaPayment,
  Budget as PrismaBudget,
  Customer as PrismaCustomer,
  Driver as PrismaDriver,
  Route as PrismaRoute,
} from "@prisma/client";

export class MoveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MoveCountArgs, "select">): Promise<number> {
    return this.prisma.move.count(args);
  }

  async moves<T extends Prisma.MoveFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveFindManyArgs>
  ): Promise<PrismaMove[]> {
    return this.prisma.move.findMany<Prisma.MoveFindManyArgs>(args);
  }
  async move<T extends Prisma.MoveFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveFindUniqueArgs>
  ): Promise<PrismaMove | null> {
    return this.prisma.move.findUnique(args);
  }
  async createMove<T extends Prisma.MoveCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveCreateArgs>
  ): Promise<PrismaMove> {
    return this.prisma.move.create<T>(args);
  }
  async updateMove<T extends Prisma.MoveUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveUpdateArgs>
  ): Promise<PrismaMove> {
    return this.prisma.move.update<T>(args);
  }
  async deleteMove<T extends Prisma.MoveDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveDeleteArgs>
  ): Promise<PrismaMove> {
    return this.prisma.move.delete(args);
  }

  async findCostSimulation(
    parentId: string,
    args: Prisma.CostSimulationFindManyArgs
  ): Promise<PrismaCostSimulation[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .costSimulation(args);
  }

  async findGpsData(
    parentId: string,
    args: Prisma.GpsDatumFindManyArgs
  ): Promise<PrismaGpsDatum[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .gpsData(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async getBudget(parentId: string): Promise<PrismaBudget | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .budget();
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getDriver(parentId: string): Promise<PrismaDriver | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .driver();
  }

  async getRoute(parentId: string): Promise<PrismaRoute | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .route();
  }
}
