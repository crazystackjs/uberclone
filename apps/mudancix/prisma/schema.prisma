datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
  discount     Discount[]
  email        String         @unique
  feedbacks    Feedback[]
  firstName    String
  id           Int            @id @default(autoincrement())
  lastName     String
  moves        Move[]
  notification Notification[]
  password     String
  phone        String
}

model Move {
  costDistance Float
  costVolume   Float
  createdAt    DateTime       @default(now())
  customer     Customer       @relation(fields: [customerId], references: [id])
  customerId   Int
  date         DateTime
  distanceKm   Float
  employees    MoveEmployee[]
  feedback     Feedback?
  id           Int            @id @default(autoincrement())
  insurance    Insurance[]
  items        Item[]
  payment      Payment[]
  route        Route[]
  status       String
  storage      Storage[]
  totalCost    Float
  updatedAt    DateTime       @updatedAt
  vehicle      Vehicle?       @relation(fields: [vehicleId], references: [id])
  vehicleId    Int?
  volumeM3     Float
}

model Item {
  description String?
  id          Int     @id @default(autoincrement())
  move        Move    @relation(fields: [moveId], references: [id])
  moveId      Int
  name        String
  photoUrl    String?
  volumeM3    Float
}

model Vehicle {
  capacityM3   Float
  id           Int    @id @default(autoincrement())
  licensePlate String @unique
  make         String
  model        String
  moves        Move[]
}

model Employee {
  email     String         @unique
  firstName String
  id        Int            @id @default(autoincrement())
  lastName  String
  moves     MoveEmployee[]
  phone     String
  role      String
}

model MoveEmployee {
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  id         Int      @id @default(autoincrement())
  move       Move     @relation(fields: [moveId], references: [id])
  moveId     Int
}

model Service {
  cost        Float
  description String
  id          Int    @id @default(autoincrement())
  name        String
}

model Feedback {
  comments   String?
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  id         Int      @id @default(autoincrement())
  move       Move     @relation(fields: [moveId], references: [id])
  moveId     Int      @unique
  rating     Int
}

model Notification {
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  id         Int      @id @default(autoincrement())
  message    String
  read       Boolean  @default(false)
}

model Payment {
  amount    Float
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  method    String
  move      Move     @relation(fields: [moveId], references: [id])
  moveId    Int
  status    String
}

model Insurance {
  cost           Float
  coverageAmount Float
  id             Int    @id @default(autoincrement())
  move           Move   @relation(fields: [moveId], references: [id])
  moveId         Int
  policyNumber   String
  provider       String
}

model Route {
  destination   String
  estimatedTime Float
  id            Int    @id @default(autoincrement())
  move          Move   @relation(fields: [moveId], references: [id])
  moveId        Int
  origin        String
}

model Storage {
  cost      Float
  endDate   DateTime
  id        Int      @id @default(autoincrement())
  location  String
  move      Move     @relation(fields: [moveId], references: [id])
  moveId    Int
  startDate DateTime
}

model Discount {
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  description String
  id          Int      @id @default(autoincrement())
  percentage  Float
  validUntil  DateTime
}
