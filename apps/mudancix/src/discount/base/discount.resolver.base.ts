/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Discount } from "./Discount";
import { DiscountCountArgs } from "./DiscountCountArgs";
import { DiscountFindManyArgs } from "./DiscountFindManyArgs";
import { DiscountFindUniqueArgs } from "./DiscountFindUniqueArgs";
import { CreateDiscountArgs } from "./CreateDiscountArgs";
import { UpdateDiscountArgs } from "./UpdateDiscountArgs";
import { DeleteDiscountArgs } from "./DeleteDiscountArgs";
import { Customer } from "../../customer/base/Customer";
import { DiscountService } from "../discount.service";
@graphql.Resolver(() => Discount)
export class DiscountResolverBase {
  constructor(protected readonly service: DiscountService) {}

  async _discountsMeta(
    @graphql.Args() args: DiscountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Discount])
  async discounts(
    @graphql.Args() args: DiscountFindManyArgs
  ): Promise<Discount[]> {
    return this.service.discounts(args);
  }

  @graphql.Query(() => Discount, { nullable: true })
  async discount(
    @graphql.Args() args: DiscountFindUniqueArgs
  ): Promise<Discount | null> {
    const result = await this.service.discount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Discount)
  async createDiscount(
    @graphql.Args() args: CreateDiscountArgs
  ): Promise<Discount> {
    return await this.service.createDiscount({
      ...args,
      data: {
        ...args.data,

        customer: {
          connect: args.data.customer,
        },
      },
    });
  }

  @graphql.Mutation(() => Discount)
  async updateDiscount(
    @graphql.Args() args: UpdateDiscountArgs
  ): Promise<Discount | null> {
    try {
      return await this.service.updateDiscount({
        ...args,
        data: {
          ...args.data,

          customer: {
            connect: args.data.customer,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Discount)
  async deleteDiscount(
    @graphql.Args() args: DeleteDiscountArgs
  ): Promise<Discount | null> {
    try {
      return await this.service.deleteDiscount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: Discount
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
