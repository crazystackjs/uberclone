/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Insurance } from "./Insurance";
import { InsuranceCountArgs } from "./InsuranceCountArgs";
import { InsuranceFindManyArgs } from "./InsuranceFindManyArgs";
import { InsuranceFindUniqueArgs } from "./InsuranceFindUniqueArgs";
import { CreateInsuranceArgs } from "./CreateInsuranceArgs";
import { UpdateInsuranceArgs } from "./UpdateInsuranceArgs";
import { DeleteInsuranceArgs } from "./DeleteInsuranceArgs";
import { Move } from "../../move/base/Move";
import { InsuranceService } from "../insurance.service";
@graphql.Resolver(() => Insurance)
export class InsuranceResolverBase {
  constructor(protected readonly service: InsuranceService) {}

  async _insurancesMeta(
    @graphql.Args() args: InsuranceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Insurance])
  async insurances(
    @graphql.Args() args: InsuranceFindManyArgs
  ): Promise<Insurance[]> {
    return this.service.insurances(args);
  }

  @graphql.Query(() => Insurance, { nullable: true })
  async insurance(
    @graphql.Args() args: InsuranceFindUniqueArgs
  ): Promise<Insurance | null> {
    const result = await this.service.insurance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Insurance)
  async createInsurance(
    @graphql.Args() args: CreateInsuranceArgs
  ): Promise<Insurance> {
    return await this.service.createInsurance({
      ...args,
      data: {
        ...args.data,

        move: {
          connect: args.data.move,
        },
      },
    });
  }

  @graphql.Mutation(() => Insurance)
  async updateInsurance(
    @graphql.Args() args: UpdateInsuranceArgs
  ): Promise<Insurance | null> {
    try {
      return await this.service.updateInsurance({
        ...args,
        data: {
          ...args.data,

          move: {
            connect: args.data.move,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Insurance)
  async deleteInsurance(
    @graphql.Args() args: DeleteInsuranceArgs
  ): Promise<Insurance | null> {
    try {
      return await this.service.deleteInsurance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Move, {
    nullable: true,
    name: "move",
  })
  async getMove(@graphql.Parent() parent: Insurance): Promise<Move | null> {
    const result = await this.service.getMove(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
