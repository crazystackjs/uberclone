/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsDate,
  ValidateNested,
  IsOptional,
  IsInt,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { Customer } from "../../customer/base/Customer";
import { MoveEmployee } from "../../moveEmployee/base/MoveEmployee";
import { Feedback } from "../../feedback/base/Feedback";
import { Insurance } from "../../insurance/base/Insurance";
import { Item } from "../../item/base/Item";
import { Payment } from "../../payment/base/Payment";
import { Route } from "../../route/base/Route";
import { Storage } from "../../storage/base/Storage";
import { Vehicle } from "../../vehicle/base/Vehicle";

@ObjectType()
class Move {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  costDistance!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  costVolume!: number;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: () => Customer,
  })
  @ValidateNested()
  @Type(() => Customer)
  customer?: Customer;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  date!: Date;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  distanceKm!: number;

  @ApiProperty({
    required: false,
    type: () => [MoveEmployee],
  })
  @ValidateNested()
  @Type(() => MoveEmployee)
  @IsOptional()
  employees?: Array<MoveEmployee>;

  @ApiProperty({
    required: false,
    type: () => Feedback,
  })
  @ValidateNested()
  @Type(() => Feedback)
  @IsOptional()
  feedback?: Feedback | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: false,
    type: () => [Insurance],
  })
  @ValidateNested()
  @Type(() => Insurance)
  @IsOptional()
  insurance?: Array<Insurance>;

  @ApiProperty({
    required: false,
    type: () => [Item],
  })
  @ValidateNested()
  @Type(() => Item)
  @IsOptional()
  items?: Array<Item>;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payment?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: () => [Route],
  })
  @ValidateNested()
  @Type(() => Route)
  @IsOptional()
  route?: Array<Route>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  status!: string;

  @ApiProperty({
    required: false,
    type: () => [Storage],
  })
  @ValidateNested()
  @Type(() => Storage)
  @IsOptional()
  storage?: Array<Storage>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  totalCost!: number;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => Vehicle,
  })
  @ValidateNested()
  @Type(() => Vehicle)
  @IsOptional()
  vehicle?: Vehicle | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  volumeM3!: number;
}

export { Move as Move };
