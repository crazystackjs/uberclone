/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  ValidateNested,
  IsDate,
  IsString,
} from "class-validator";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { Type } from "class-transformer";
import { MoveEmployeeUpdateManyWithoutMovesInput } from "./MoveEmployeeUpdateManyWithoutMovesInput";
import { FeedbackWhereUniqueInput } from "../../feedback/base/FeedbackWhereUniqueInput";
import { InsuranceUpdateManyWithoutMovesInput } from "./InsuranceUpdateManyWithoutMovesInput";
import { ItemUpdateManyWithoutMovesInput } from "./ItemUpdateManyWithoutMovesInput";
import { PaymentUpdateManyWithoutMovesInput } from "./PaymentUpdateManyWithoutMovesInput";
import { RouteUpdateManyWithoutMovesInput } from "./RouteUpdateManyWithoutMovesInput";
import { StorageUpdateManyWithoutMovesInput } from "./StorageUpdateManyWithoutMovesInput";
import { VehicleWhereUniqueInput } from "../../vehicle/base/VehicleWhereUniqueInput";

@InputType()
class MoveUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  costDistance?: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  costVolume?: number;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  customer?: CustomerWhereUniqueInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  date?: Date;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  distanceKm?: number;

  @ApiProperty({
    required: false,
    type: () => MoveEmployeeUpdateManyWithoutMovesInput,
  })
  @ValidateNested()
  @Type(() => MoveEmployeeUpdateManyWithoutMovesInput)
  @IsOptional()
  @Field(() => MoveEmployeeUpdateManyWithoutMovesInput, {
    nullable: true,
  })
  employees?: MoveEmployeeUpdateManyWithoutMovesInput;

  @ApiProperty({
    required: false,
    type: () => FeedbackWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => FeedbackWhereUniqueInput)
  @IsOptional()
  @Field(() => FeedbackWhereUniqueInput, {
    nullable: true,
  })
  feedback?: FeedbackWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => InsuranceUpdateManyWithoutMovesInput,
  })
  @ValidateNested()
  @Type(() => InsuranceUpdateManyWithoutMovesInput)
  @IsOptional()
  @Field(() => InsuranceUpdateManyWithoutMovesInput, {
    nullable: true,
  })
  insurance?: InsuranceUpdateManyWithoutMovesInput;

  @ApiProperty({
    required: false,
    type: () => ItemUpdateManyWithoutMovesInput,
  })
  @ValidateNested()
  @Type(() => ItemUpdateManyWithoutMovesInput)
  @IsOptional()
  @Field(() => ItemUpdateManyWithoutMovesInput, {
    nullable: true,
  })
  items?: ItemUpdateManyWithoutMovesInput;

  @ApiProperty({
    required: false,
    type: () => PaymentUpdateManyWithoutMovesInput,
  })
  @ValidateNested()
  @Type(() => PaymentUpdateManyWithoutMovesInput)
  @IsOptional()
  @Field(() => PaymentUpdateManyWithoutMovesInput, {
    nullable: true,
  })
  payment?: PaymentUpdateManyWithoutMovesInput;

  @ApiProperty({
    required: false,
    type: () => RouteUpdateManyWithoutMovesInput,
  })
  @ValidateNested()
  @Type(() => RouteUpdateManyWithoutMovesInput)
  @IsOptional()
  @Field(() => RouteUpdateManyWithoutMovesInput, {
    nullable: true,
  })
  route?: RouteUpdateManyWithoutMovesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  status?: string;

  @ApiProperty({
    required: false,
    type: () => StorageUpdateManyWithoutMovesInput,
  })
  @ValidateNested()
  @Type(() => StorageUpdateManyWithoutMovesInput)
  @IsOptional()
  @Field(() => StorageUpdateManyWithoutMovesInput, {
    nullable: true,
  })
  storage?: StorageUpdateManyWithoutMovesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  totalCost?: number;

  @ApiProperty({
    required: false,
    type: () => VehicleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => VehicleWhereUniqueInput)
  @IsOptional()
  @Field(() => VehicleWhereUniqueInput, {
    nullable: true,
  })
  vehicle?: VehicleWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  volumeM3?: number;
}

export { MoveUpdateInput as MoveUpdateInput };
