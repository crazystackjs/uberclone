/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Move as PrismaMove,
  MoveEmployee as PrismaMoveEmployee,
  Insurance as PrismaInsurance,
  Item as PrismaItem,
  Payment as PrismaPayment,
  Route as PrismaRoute,
  Storage as PrismaStorage,
  Customer as PrismaCustomer,
  Feedback as PrismaFeedback,
  Vehicle as PrismaVehicle,
} from "@prisma/client";

export class MoveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MoveCountArgs, "select">): Promise<number> {
    return this.prisma.move.count(args);
  }

  async moves<T extends Prisma.MoveFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveFindManyArgs>
  ): Promise<PrismaMove[]> {
    return this.prisma.move.findMany<Prisma.MoveFindManyArgs>(args);
  }
  async move<T extends Prisma.MoveFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveFindUniqueArgs>
  ): Promise<PrismaMove | null> {
    return this.prisma.move.findUnique(args);
  }
  async createMove<T extends Prisma.MoveCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveCreateArgs>
  ): Promise<PrismaMove> {
    return this.prisma.move.create<T>(args);
  }
  async updateMove<T extends Prisma.MoveUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveUpdateArgs>
  ): Promise<PrismaMove> {
    return this.prisma.move.update<T>(args);
  }
  async deleteMove<T extends Prisma.MoveDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveDeleteArgs>
  ): Promise<PrismaMove> {
    return this.prisma.move.delete(args);
  }

  async findEmployees(
    parentId: number,
    args: Prisma.MoveEmployeeFindManyArgs
  ): Promise<PrismaMoveEmployee[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employees(args);
  }

  async findInsurance(
    parentId: number,
    args: Prisma.InsuranceFindManyArgs
  ): Promise<PrismaInsurance[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .insurance(args);
  }

  async findItems(
    parentId: number,
    args: Prisma.ItemFindManyArgs
  ): Promise<PrismaItem[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .items(args);
  }

  async findPayment(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payment(args);
  }

  async findRoute(
    parentId: number,
    args: Prisma.RouteFindManyArgs
  ): Promise<PrismaRoute[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .route(args);
  }

  async findStorage(
    parentId: number,
    args: Prisma.StorageFindManyArgs
  ): Promise<PrismaStorage[]> {
    return this.prisma.move
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .storage(args);
  }

  async getCustomer(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getFeedback(parentId: number): Promise<PrismaFeedback | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .feedback();
  }

  async getVehicle(parentId: number): Promise<PrismaVehicle | null> {
    return this.prisma.move
      .findUnique({
        where: { id: parentId },
      })
      .vehicle();
  }
}
