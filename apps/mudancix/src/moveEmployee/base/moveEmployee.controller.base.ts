/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MoveEmployeeService } from "../moveEmployee.service";
import { MoveEmployeeCreateInput } from "./MoveEmployeeCreateInput";
import { MoveEmployee } from "./MoveEmployee";
import { MoveEmployeeFindManyArgs } from "./MoveEmployeeFindManyArgs";
import { MoveEmployeeWhereUniqueInput } from "./MoveEmployeeWhereUniqueInput";
import { MoveEmployeeUpdateInput } from "./MoveEmployeeUpdateInput";

export class MoveEmployeeControllerBase {
  constructor(protected readonly service: MoveEmployeeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MoveEmployee })
  async createMoveEmployee(
    @common.Body() data: MoveEmployeeCreateInput
  ): Promise<MoveEmployee> {
    return await this.service.createMoveEmployee({
      data: {
        ...data,

        employee: {
          connect: data.employee,
        },

        move: {
          connect: data.move,
        },
      },
      select: {
        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        move: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MoveEmployee] })
  @ApiNestedQuery(MoveEmployeeFindManyArgs)
  async moveEmployees(@common.Req() request: Request): Promise<MoveEmployee[]> {
    const args = plainToClass(MoveEmployeeFindManyArgs, request.query);
    return this.service.moveEmployees({
      ...args,
      select: {
        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        move: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MoveEmployee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async moveEmployee(
    @common.Param() params: MoveEmployeeWhereUniqueInput
  ): Promise<MoveEmployee | null> {
    const result = await this.service.moveEmployee({
      where: params,
      select: {
        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        move: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MoveEmployee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMoveEmployee(
    @common.Param() params: MoveEmployeeWhereUniqueInput,
    @common.Body() data: MoveEmployeeUpdateInput
  ): Promise<MoveEmployee | null> {
    try {
      return await this.service.updateMoveEmployee({
        where: params,
        data: {
          ...data,

          employee: {
            connect: data.employee,
          },

          move: {
            connect: data.move,
          },
        },
        select: {
          employee: {
            select: {
              id: true,
            },
          },

          id: true,

          move: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MoveEmployee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMoveEmployee(
    @common.Param() params: MoveEmployeeWhereUniqueInput
  ): Promise<MoveEmployee | null> {
    try {
      return await this.service.deleteMoveEmployee({
        where: params,
        select: {
          employee: {
            select: {
              id: true,
            },
          },

          id: true,

          move: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
