/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MoveEmployee } from "./MoveEmployee";
import { MoveEmployeeCountArgs } from "./MoveEmployeeCountArgs";
import { MoveEmployeeFindManyArgs } from "./MoveEmployeeFindManyArgs";
import { MoveEmployeeFindUniqueArgs } from "./MoveEmployeeFindUniqueArgs";
import { CreateMoveEmployeeArgs } from "./CreateMoveEmployeeArgs";
import { UpdateMoveEmployeeArgs } from "./UpdateMoveEmployeeArgs";
import { DeleteMoveEmployeeArgs } from "./DeleteMoveEmployeeArgs";
import { Employee } from "../../employee/base/Employee";
import { Move } from "../../move/base/Move";
import { MoveEmployeeService } from "../moveEmployee.service";
@graphql.Resolver(() => MoveEmployee)
export class MoveEmployeeResolverBase {
  constructor(protected readonly service: MoveEmployeeService) {}

  async _moveEmployeesMeta(
    @graphql.Args() args: MoveEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MoveEmployee])
  async moveEmployees(
    @graphql.Args() args: MoveEmployeeFindManyArgs
  ): Promise<MoveEmployee[]> {
    return this.service.moveEmployees(args);
  }

  @graphql.Query(() => MoveEmployee, { nullable: true })
  async moveEmployee(
    @graphql.Args() args: MoveEmployeeFindUniqueArgs
  ): Promise<MoveEmployee | null> {
    const result = await this.service.moveEmployee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MoveEmployee)
  async createMoveEmployee(
    @graphql.Args() args: CreateMoveEmployeeArgs
  ): Promise<MoveEmployee> {
    return await this.service.createMoveEmployee({
      ...args,
      data: {
        ...args.data,

        employee: {
          connect: args.data.employee,
        },

        move: {
          connect: args.data.move,
        },
      },
    });
  }

  @graphql.Mutation(() => MoveEmployee)
  async updateMoveEmployee(
    @graphql.Args() args: UpdateMoveEmployeeArgs
  ): Promise<MoveEmployee | null> {
    try {
      return await this.service.updateMoveEmployee({
        ...args,
        data: {
          ...args.data,

          employee: {
            connect: args.data.employee,
          },

          move: {
            connect: args.data.move,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MoveEmployee)
  async deleteMoveEmployee(
    @graphql.Args() args: DeleteMoveEmployeeArgs
  ): Promise<MoveEmployee | null> {
    try {
      return await this.service.deleteMoveEmployee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: MoveEmployee
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Move, {
    nullable: true,
    name: "move",
  })
  async getMove(@graphql.Parent() parent: MoveEmployee): Promise<Move | null> {
    const result = await this.service.getMove(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
