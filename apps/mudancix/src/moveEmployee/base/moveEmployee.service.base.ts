/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MoveEmployee as PrismaMoveEmployee,
  Employee as PrismaEmployee,
  Move as PrismaMove,
} from "@prisma/client";

export class MoveEmployeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MoveEmployeeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.moveEmployee.count(args);
  }

  async moveEmployees<T extends Prisma.MoveEmployeeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveEmployeeFindManyArgs>
  ): Promise<PrismaMoveEmployee[]> {
    return this.prisma.moveEmployee.findMany<Prisma.MoveEmployeeFindManyArgs>(
      args
    );
  }
  async moveEmployee<T extends Prisma.MoveEmployeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveEmployeeFindUniqueArgs>
  ): Promise<PrismaMoveEmployee | null> {
    return this.prisma.moveEmployee.findUnique(args);
  }
  async createMoveEmployee<T extends Prisma.MoveEmployeeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveEmployeeCreateArgs>
  ): Promise<PrismaMoveEmployee> {
    return this.prisma.moveEmployee.create<T>(args);
  }
  async updateMoveEmployee<T extends Prisma.MoveEmployeeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveEmployeeUpdateArgs>
  ): Promise<PrismaMoveEmployee> {
    return this.prisma.moveEmployee.update<T>(args);
  }
  async deleteMoveEmployee<T extends Prisma.MoveEmployeeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MoveEmployeeDeleteArgs>
  ): Promise<PrismaMoveEmployee> {
    return this.prisma.moveEmployee.delete(args);
  }

  async getEmployee(parentId: number): Promise<PrismaEmployee | null> {
    return this.prisma.moveEmployee
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getMove(parentId: number): Promise<PrismaMove | null> {
    return this.prisma.moveEmployee
      .findUnique({
        where: { id: parentId },
      })
      .move();
  }
}
