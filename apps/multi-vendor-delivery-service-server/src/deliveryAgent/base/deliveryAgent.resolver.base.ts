/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryAgent } from "./DeliveryAgent";
import { DeliveryAgentCountArgs } from "./DeliveryAgentCountArgs";
import { DeliveryAgentFindManyArgs } from "./DeliveryAgentFindManyArgs";
import { DeliveryAgentFindUniqueArgs } from "./DeliveryAgentFindUniqueArgs";
import { CreateDeliveryAgentArgs } from "./CreateDeliveryAgentArgs";
import { UpdateDeliveryAgentArgs } from "./UpdateDeliveryAgentArgs";
import { DeleteDeliveryAgentArgs } from "./DeleteDeliveryAgentArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { DeliveryAgentService } from "../deliveryAgent.service";
@graphql.Resolver(() => DeliveryAgent)
export class DeliveryAgentResolverBase {
  constructor(protected readonly service: DeliveryAgentService) {}

  async _deliveryAgentsMeta(
    @graphql.Args() args: DeliveryAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryAgent])
  async deliveryAgents(
    @graphql.Args() args: DeliveryAgentFindManyArgs
  ): Promise<DeliveryAgent[]> {
    return this.service.deliveryAgents(args);
  }

  @graphql.Query(() => DeliveryAgent, { nullable: true })
  async deliveryAgent(
    @graphql.Args() args: DeliveryAgentFindUniqueArgs
  ): Promise<DeliveryAgent | null> {
    const result = await this.service.deliveryAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryAgent)
  async createDeliveryAgent(
    @graphql.Args() args: CreateDeliveryAgentArgs
  ): Promise<DeliveryAgent> {
    return await this.service.createDeliveryAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeliveryAgent)
  async updateDeliveryAgent(
    @graphql.Args() args: UpdateDeliveryAgentArgs
  ): Promise<DeliveryAgent | null> {
    try {
      return await this.service.updateDeliveryAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryAgent)
  async deleteDeliveryAgent(
    @graphql.Args() args: DeleteDeliveryAgentArgs
  ): Promise<DeliveryAgent | null> {
    try {
      return await this.service.deleteDeliveryAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Order], { name: "orders" })
  async findOrders(
    @graphql.Parent() parent: DeliveryAgent,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
