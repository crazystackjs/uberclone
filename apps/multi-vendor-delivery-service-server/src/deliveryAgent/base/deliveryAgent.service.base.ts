/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DeliveryAgent as PrismaDeliveryAgent,
  Order as PrismaOrder,
} from "@prisma/client";

export class DeliveryAgentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeliveryAgentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deliveryAgent.count(args);
  }

  async deliveryAgents<T extends Prisma.DeliveryAgentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryAgentFindManyArgs>
  ): Promise<PrismaDeliveryAgent[]> {
    return this.prisma.deliveryAgent.findMany<Prisma.DeliveryAgentFindManyArgs>(
      args
    );
  }
  async deliveryAgent<T extends Prisma.DeliveryAgentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryAgentFindUniqueArgs>
  ): Promise<PrismaDeliveryAgent | null> {
    return this.prisma.deliveryAgent.findUnique(args);
  }
  async createDeliveryAgent<T extends Prisma.DeliveryAgentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryAgentCreateArgs>
  ): Promise<PrismaDeliveryAgent> {
    return this.prisma.deliveryAgent.create<T>(args);
  }
  async updateDeliveryAgent<T extends Prisma.DeliveryAgentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryAgentUpdateArgs>
  ): Promise<PrismaDeliveryAgent> {
    return this.prisma.deliveryAgent.update<T>(args);
  }
  async deleteDeliveryAgent<T extends Prisma.DeliveryAgentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryAgentDeleteArgs>
  ): Promise<PrismaDeliveryAgent> {
    return this.prisma.deliveryAgent.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.deliveryAgent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }
}
