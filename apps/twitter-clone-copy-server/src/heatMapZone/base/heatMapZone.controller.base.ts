/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HeatMapZoneService } from "../heatMapZone.service";
import { HeatMapZoneCreateInput } from "./HeatMapZoneCreateInput";
import { HeatMapZone } from "./HeatMapZone";
import { HeatMapZoneFindManyArgs } from "./HeatMapZoneFindManyArgs";
import { HeatMapZoneWhereUniqueInput } from "./HeatMapZoneWhereUniqueInput";
import { HeatMapZoneUpdateInput } from "./HeatMapZoneUpdateInput";

export class HeatMapZoneControllerBase {
  constructor(protected readonly service: HeatMapZoneService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HeatMapZone })
  async createHeatMapZone(
    @common.Body() data: HeatMapZoneCreateInput
  ): Promise<HeatMapZone> {
    return await this.service.createHeatMapZone({
      data: data,
      select: {
        createdAt: true,
        id: true,
        intensity: true,
        location: true,
        radius: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HeatMapZone] })
  @ApiNestedQuery(HeatMapZoneFindManyArgs)
  async heatMapZones(@common.Req() request: Request): Promise<HeatMapZone[]> {
    const args = plainToClass(HeatMapZoneFindManyArgs, request.query);
    return this.service.heatMapZones({
      ...args,
      select: {
        createdAt: true,
        id: true,
        intensity: true,
        location: true,
        radius: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HeatMapZone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async heatMapZone(
    @common.Param() params: HeatMapZoneWhereUniqueInput
  ): Promise<HeatMapZone | null> {
    const result = await this.service.heatMapZone({
      where: params,
      select: {
        createdAt: true,
        id: true,
        intensity: true,
        location: true,
        radius: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HeatMapZone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHeatMapZone(
    @common.Param() params: HeatMapZoneWhereUniqueInput,
    @common.Body() data: HeatMapZoneUpdateInput
  ): Promise<HeatMapZone | null> {
    try {
      return await this.service.updateHeatMapZone({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          intensity: true,
          location: true,
          radius: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HeatMapZone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHeatMapZone(
    @common.Param() params: HeatMapZoneWhereUniqueInput
  ): Promise<HeatMapZone | null> {
    try {
      return await this.service.deleteHeatMapZone({
        where: params,
        select: {
          createdAt: true,
          id: true,
          intensity: true,
          location: true,
          radius: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
