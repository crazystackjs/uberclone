/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HeatMapZone } from "./HeatMapZone";
import { HeatMapZoneCountArgs } from "./HeatMapZoneCountArgs";
import { HeatMapZoneFindManyArgs } from "./HeatMapZoneFindManyArgs";
import { HeatMapZoneFindUniqueArgs } from "./HeatMapZoneFindUniqueArgs";
import { CreateHeatMapZoneArgs } from "./CreateHeatMapZoneArgs";
import { UpdateHeatMapZoneArgs } from "./UpdateHeatMapZoneArgs";
import { DeleteHeatMapZoneArgs } from "./DeleteHeatMapZoneArgs";
import { HeatMapZoneService } from "../heatMapZone.service";
@graphql.Resolver(() => HeatMapZone)
export class HeatMapZoneResolverBase {
  constructor(protected readonly service: HeatMapZoneService) {}

  async _heatMapZonesMeta(
    @graphql.Args() args: HeatMapZoneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HeatMapZone])
  async heatMapZones(
    @graphql.Args() args: HeatMapZoneFindManyArgs
  ): Promise<HeatMapZone[]> {
    return this.service.heatMapZones(args);
  }

  @graphql.Query(() => HeatMapZone, { nullable: true })
  async heatMapZone(
    @graphql.Args() args: HeatMapZoneFindUniqueArgs
  ): Promise<HeatMapZone | null> {
    const result = await this.service.heatMapZone(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HeatMapZone)
  async createHeatMapZone(
    @graphql.Args() args: CreateHeatMapZoneArgs
  ): Promise<HeatMapZone> {
    return await this.service.createHeatMapZone({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => HeatMapZone)
  async updateHeatMapZone(
    @graphql.Args() args: UpdateHeatMapZoneArgs
  ): Promise<HeatMapZone | null> {
    try {
      return await this.service.updateHeatMapZone({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HeatMapZone)
  async deleteHeatMapZone(
    @graphql.Args() args: DeleteHeatMapZoneArgs
  ): Promise<HeatMapZone | null> {
    try {
      return await this.service.deleteHeatMapZone(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
