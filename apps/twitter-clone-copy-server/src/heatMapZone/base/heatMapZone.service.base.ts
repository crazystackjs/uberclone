/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, HeatMapZone as PrismaHeatMapZone } from "@prisma/client";

export class HeatMapZoneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HeatMapZoneCountArgs, "select">
  ): Promise<number> {
    return this.prisma.heatMapZone.count(args);
  }

  async heatMapZones<T extends Prisma.HeatMapZoneFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HeatMapZoneFindManyArgs>
  ): Promise<PrismaHeatMapZone[]> {
    return this.prisma.heatMapZone.findMany<Prisma.HeatMapZoneFindManyArgs>(
      args
    );
  }
  async heatMapZone<T extends Prisma.HeatMapZoneFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HeatMapZoneFindUniqueArgs>
  ): Promise<PrismaHeatMapZone | null> {
    return this.prisma.heatMapZone.findUnique(args);
  }
  async createHeatMapZone<T extends Prisma.HeatMapZoneCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HeatMapZoneCreateArgs>
  ): Promise<PrismaHeatMapZone> {
    return this.prisma.heatMapZone.create<T>(args);
  }
  async updateHeatMapZone<T extends Prisma.HeatMapZoneUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HeatMapZoneUpdateArgs>
  ): Promise<PrismaHeatMapZone> {
    return this.prisma.heatMapZone.update<T>(args);
  }
  async deleteHeatMapZone<T extends Prisma.HeatMapZoneDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HeatMapZoneDeleteArgs>
  ): Promise<PrismaHeatMapZone> {
    return this.prisma.heatMapZone.delete(args);
  }
}
