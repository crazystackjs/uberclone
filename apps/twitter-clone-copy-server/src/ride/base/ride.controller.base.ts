/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RideService } from "../ride.service";
import { RideCreateInput } from "./RideCreateInput";
import { Ride } from "./Ride";
import { RideFindManyArgs } from "./RideFindManyArgs";
import { RideWhereUniqueInput } from "./RideWhereUniqueInput";
import { RideUpdateInput } from "./RideUpdateInput";

export class RideControllerBase {
  constructor(protected readonly service: RideService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ride })
  async createRide(@common.Body() data: RideCreateInput): Promise<Ride> {
    return await this.service.createRide({
      data: data,
      select: {
        createdAt: true,
        driverId: true,
        dropoffLocation: true,
        id: true,
        pickupLocation: true,
        riderId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ride] })
  @ApiNestedQuery(RideFindManyArgs)
  async rides(@common.Req() request: Request): Promise<Ride[]> {
    const args = plainToClass(RideFindManyArgs, request.query);
    return this.service.rides({
      ...args,
      select: {
        createdAt: true,
        driverId: true,
        dropoffLocation: true,
        id: true,
        pickupLocation: true,
        riderId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ride(
    @common.Param() params: RideWhereUniqueInput
  ): Promise<Ride | null> {
    const result = await this.service.ride({
      where: params,
      select: {
        createdAt: true,
        driverId: true,
        dropoffLocation: true,
        id: true,
        pickupLocation: true,
        riderId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRide(
    @common.Param() params: RideWhereUniqueInput,
    @common.Body() data: RideUpdateInput
  ): Promise<Ride | null> {
    try {
      return await this.service.updateRide({
        where: params,
        data: data,
        select: {
          createdAt: true,
          driverId: true,
          dropoffLocation: true,
          id: true,
          pickupLocation: true,
          riderId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRide(
    @common.Param() params: RideWhereUniqueInput
  ): Promise<Ride | null> {
    try {
      return await this.service.deleteRide({
        where: params,
        select: {
          createdAt: true,
          driverId: true,
          dropoffLocation: true,
          id: true,
          pickupLocation: true,
          riderId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
