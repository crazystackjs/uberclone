datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tweet {
  author    String?
  content   String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  likes     Like[]
  updatedAt DateTime @updatedAt
}

model User {
  bio            String?
  createdAt      DateTime  @default(now())
  email          String?
  id             String    @id @default(cuid())
  likes          Like[]
  password       String?
  profilePicture Json?
  retweets       Retweet[]
  updatedAt      DateTime  @updatedAt
  username       String?
}

model Like {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   String?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Retweet {
  createdAt     DateTime @default(now())
  id            String   @id @default(cuid())
  originalTweet String?
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model Follower {
  createdAt  DateTime   @default(now())
  follower   Follower?  @relation(name: "FollowerOnFollowers", fields: [followerId], references: [id])
  followerId String?
  followers  Follower[] @relation(name: "FollowerOnFollowers")
  following  String?
  id         String     @id @default(cuid())
  updatedAt  DateTime   @updatedAt
}

model Message {
  chatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id])
  chatRoomId String?
  content    String?
  createdAt  DateTime  @default(now())
  id         String    @id @default(cuid())
  sender     String?
  timestamp  DateTime?
  updatedAt  DateTime  @updatedAt
}

model ChatRoom {
  createdAt    DateTime  @default(now())
  id           String    @id @default(cuid())
  messages     Message[]
  name         String?
  participants String?
  updatedAt    DateTime  @updatedAt
}

model Driver {
  createdAt   DateTime  @default(now())
  email       String?
  id          String    @id @default(cuid())
  name        String?
  phoneNumber String?
  rides       Ride[]
  updatedAt   DateTime  @updatedAt
  vehicle     Vehicle?  @relation(name: "DriversOnVehicle", fields: [vehicleId], references: [id])
  vehicleId   String?
  vehicles    Vehicle[] @relation(name: "DriverOnVehicles")
}

model Rider {
  createdAt   DateTime @default(now())
  email       String?
  id          String   @id @default(cuid())
  name        String?
  phoneNumber String?
  rides       Ride[]
  updatedAt   DateTime @updatedAt
}

model Ride {
  accepted           Boolean?
  attemptedDrivers   Json?
  baseFare           Float?
  completedAt        DateTime?
  createdAt          DateTime               @default(now())
  creditCardVerified Boolean?
  currentLocation    Json?
  demandMultiplier   Float?
  driver             Driver?                @relation(fields: [driverId], references: [id])
  driverId           String?
  dropoffLocation    String?
  endTime            DateTime?
  fare               Float?
  heatMapZone        String?
  id                 String                 @id @default(cuid())
  paymentDetails     Json?
  paymentStatus      EnumRidePaymentStatus?
  perKmRate          Float?
  pickupLocation     String?
  pricingType        EnumRidePricingType?
  radius             Float?
  requestedAt        DateTime?
  rider              Rider?                 @relation(fields: [riderId], references: [id])
  riderId            String?
  serviceFee         Float?
  startTime          DateTime?
  status             String?
  updatedAt          DateTime               @updatedAt
}

model Vehicle {
  createdAt    DateTime @default(now())
  driver       Driver?  @relation(name: "DriverOnVehicles", fields: [driverId], references: [id])
  driverId     String?
  drivers      Driver[] @relation(name: "DriversOnVehicle")
  id           String   @id @default(cuid())
  licensePlate String?
  make         String?
  model        String?
  updatedAt    DateTime @updatedAt
}

model HeatMapZone {
  coordinates Json?
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(cuid())
  updatedAt   DateTime @updatedAt
  zoneName    String?
}

enum EnumRidePaymentStatus {
  Option1
}

enum EnumRidePricingType {
  Option1
}
