/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RideRequestService } from "../rideRequest.service";
import { RideRequestCreateInput } from "./RideRequestCreateInput";
import { RideRequest } from "./RideRequest";
import { RideRequestFindManyArgs } from "./RideRequestFindManyArgs";
import { RideRequestWhereUniqueInput } from "./RideRequestWhereUniqueInput";
import { RideRequestUpdateInput } from "./RideRequestUpdateInput";
import { CancelRideRequestInput } from "../CancelRideRequestInput";
import { AcceptRideRequestOutput } from "../AcceptRideRequestOutput";
import { CancelRideRequestOutput } from "../CancelRideRequestOutput";

export class RideRequestControllerBase {
  constructor(protected readonly service: RideRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RideRequest })
  async createRideRequest(
    @common.Body() data: RideRequestCreateInput
  ): Promise<RideRequest> {
    return await this.service.createRideRequest({
      data: {
        ...data,

        rider: data.rider
          ? {
              connect: data.rider,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        destinationLocation: true,
        id: true,
        pickupLocation: true,

        rider: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RideRequest] })
  @ApiNestedQuery(RideRequestFindManyArgs)
  async rideRequests(@common.Req() request: Request): Promise<RideRequest[]> {
    const args = plainToClass(RideRequestFindManyArgs, request.query);
    return this.service.rideRequests({
      ...args,
      select: {
        createdAt: true,
        destinationLocation: true,
        id: true,
        pickupLocation: true,

        rider: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RideRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rideRequest(
    @common.Param() params: RideRequestWhereUniqueInput
  ): Promise<RideRequest | null> {
    const result = await this.service.rideRequest({
      where: params,
      select: {
        createdAt: true,
        destinationLocation: true,
        id: true,
        pickupLocation: true,

        rider: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RideRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRideRequest(
    @common.Param() params: RideRequestWhereUniqueInput,
    @common.Body() data: RideRequestUpdateInput
  ): Promise<RideRequest | null> {
    try {
      return await this.service.updateRideRequest({
        where: params,
        data: {
          ...data,

          rider: data.rider
            ? {
                connect: data.rider,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          destinationLocation: true,
          id: true,
          pickupLocation: true,

          rider: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RideRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRideRequest(
    @common.Param() params: RideRequestWhereUniqueInput
  ): Promise<RideRequest | null> {
    try {
      return await this.service.deleteRideRequest({
        where: params,
        select: {
          createdAt: true,
          destinationLocation: true,
          id: true,
          pickupLocation: true,

          rider: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/acceptRideRequest")
  @swagger.ApiOkResponse({
    type: AcceptRideRequestOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AcceptRideRequest(
    @common.Body()
    body: CancelRideRequestInput
  ): Promise<AcceptRideRequestOutput> {
    return this.service.AcceptRideRequest(body);
  }

  @common.Post("/cancelRideRequest")
  @swagger.ApiOkResponse({
    type: CancelRideRequestOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CancelRideRequest(
    @common.Body()
    body: CancelRideRequestInput
  ): Promise<CancelRideRequestOutput> {
    return this.service.CancelRideRequest(body);
  }
}
