/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RideRequest } from "./RideRequest";
import { RideRequestCountArgs } from "./RideRequestCountArgs";
import { RideRequestFindManyArgs } from "./RideRequestFindManyArgs";
import { RideRequestFindUniqueArgs } from "./RideRequestFindUniqueArgs";
import { CreateRideRequestArgs } from "./CreateRideRequestArgs";
import { UpdateRideRequestArgs } from "./UpdateRideRequestArgs";
import { DeleteRideRequestArgs } from "./DeleteRideRequestArgs";
import { Rider } from "../../rider/base/Rider";
import { CancelRideRequestInput } from "../CancelRideRequestInput";
import { CancelRideRequestOutput } from "../CancelRideRequestOutput";
import { RideRequestService } from "../rideRequest.service";
@graphql.Resolver(() => RideRequest)
export class RideRequestResolverBase {
  constructor(protected readonly service: RideRequestService) {}

  async _rideRequestsMeta(
    @graphql.Args() args: RideRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RideRequest])
  async rideRequests(
    @graphql.Args() args: RideRequestFindManyArgs
  ): Promise<RideRequest[]> {
    return this.service.rideRequests(args);
  }

  @graphql.Query(() => RideRequest, { nullable: true })
  async rideRequest(
    @graphql.Args() args: RideRequestFindUniqueArgs
  ): Promise<RideRequest | null> {
    const result = await this.service.rideRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RideRequest)
  async createRideRequest(
    @graphql.Args() args: CreateRideRequestArgs
  ): Promise<RideRequest> {
    return await this.service.createRideRequest({
      ...args,
      data: {
        ...args.data,

        rider: args.data.rider
          ? {
              connect: args.data.rider,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RideRequest)
  async updateRideRequest(
    @graphql.Args() args: UpdateRideRequestArgs
  ): Promise<RideRequest | null> {
    try {
      return await this.service.updateRideRequest({
        ...args,
        data: {
          ...args.data,

          rider: args.data.rider
            ? {
                connect: args.data.rider,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RideRequest)
  async deleteRideRequest(
    @graphql.Args() args: DeleteRideRequestArgs
  ): Promise<RideRequest | null> {
    try {
      return await this.service.deleteRideRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Rider, {
    nullable: true,
    name: "rider",
  })
  async getRider(@graphql.Parent() parent: RideRequest): Promise<Rider | null> {
    const result = await this.service.getRider(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CancelRideRequestOutput)
  async CancelRideRequest(
    @graphql.Args()
    args: CancelRideRequestInput
  ): Promise<CancelRideRequestOutput> {
    return this.service.CancelRideRequest(args);
  }
}
